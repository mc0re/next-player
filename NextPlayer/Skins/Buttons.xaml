<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:res="http://nextplayer.nikitins.dk/Resources">

	<res:BooleanToVisibilityConverter x:Key="BooleanToVisibleCollapsedConverter"/>
	<res:EnumToVisibilityConverter x:Key="EnumToVisibleCollapsedConverter"/>
	

	<DataTemplate x:Key="ImageButtonContentTemplate">
		<Grid Margin="{Binding Padding, RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}">
			<Image Source="{Binding Content, RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"/>
		</Grid>
	</DataTemplate>


	<DataTemplate x:Key="TextContentTemplate">
		<Grid>
			<Viewbox>
				<TextBlock Style="{DynamicResource ButtonTextStyle}"
					Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}}}"
					Text="{Binding Mode=OneWay}"/>
			</Viewbox>
		</Grid>
	</DataTemplate>

	
	<ControlTemplate x:Key="RoundButtonTemplate" TargetType="{x:Type Button}">
		<Grid Margin="{TemplateBinding Margin}">
			<Ellipse Fill="{TemplateBinding Background}"
				StrokeThickness="{TemplateBinding BorderThickness}"
				Stroke="{TemplateBinding BorderBrush}"/>
			
			<ContentPresenter x:Name="contentPresenter"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Grid>
		
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Opacity" TargetName="contentPresenter" Value="{StaticResource MouseOverOpacity}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" TargetName="contentPresenter" Value="{StaticResource DisabledTextOpacity}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>


	<ControlTemplate x:Key="RoundButtonInactiveTemplate" TargetType="{x:Type Button}">
		<Grid Margin="{TemplateBinding Margin}">
			<Ellipse Fill="Transparent"
				StrokeThickness="{TemplateBinding BorderThickness}"
				Stroke="{TemplateBinding BorderBrush}"/>

			<Grid Margin="{TemplateBinding BorderThickness}">
				<Ellipse Fill="Transparent"
					StrokeThickness="{TemplateBinding BorderThickness}"
					Stroke="{TemplateBinding Background}"/>
			</Grid>
			
			<ContentPresenter x:Name="contentPresenter"
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				RecognizesAccessKey="True"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>


	<Style x:Key="RoundButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template" Value="{DynamicResource RoundButtonTemplate}"/>
		<Setter Property="BorderThickness" Value="2"/>
		<Setter Property="BorderBrush" Value="{DynamicResource ButtonFrameBrush}"/>
		<Setter Property="Background" Value="{DynamicResource ActionButtonBackgroundBrush}"/>
		<Setter Property="Foreground" Value="{DynamicResource ButtonTextBrush}"/>
		<Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
		<Setter Property="Height" Value="36"/>
		
		<Style.Triggers>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource ActionButtonPressedBackgroundBrush}"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style x:Key="RoundImageButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource RoundButtonStyle}">
		<Setter Property="ContentTemplate" Value="{DynamicResource ImageButtonContentTemplate}"/>
		<Setter Property="Padding" Value="10"/>
	</Style>


	<!-- Assumption: is contained in a DataTemplate with DataType=PlayerAction. -->
	<Style x:Key="ParallelPlayFileButtonStyle" TargetType="{x:Type res:ParallelPlayButton}" BasedOn="{StaticResource RoundButtonStyle}">
		<Setter Property="ContentTemplate" Value="{DynamicResource TextContentTemplate}"/>
		<Setter Property="Command" Value="{DynamicResource PlayStopParallelCommand}"/>
		<Setter Property="CommandParameter" Value="{Binding ParallelIndex}"/>
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<Setter Property="Margin" Value="3"/>
        <Setter Property="Visibility" Value="{Binding HasParallelIndex, Converter={StaticResource BooleanToVisibleCollapsedConverter}}"/>
		<Setter Property="IsEnabled" Value="{Binding IsActiveParallel}"/>
		<Setter Property="IsPlaying" Value="{Binding IsPlaying}"/>
		<Setter Property="Content" Value="{Binding ParallelIndex}"/>
        <Setter Property="ToolTip" Value="Press to start / stop"/>
        <Setter Property="Background" Value="{DynamicResource ProducerButtonBackgroundBrush}"/>

		<Style.Triggers>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource ProducerButtonPressedBackgroundBrush}"/>
			</Trigger>
			<Trigger Property="IsPlaying" Value="True">
				<Setter Property="Background" Value="{DynamicResource ButtonPlayingBackgroundBrush}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Template" Value="{DynamicResource RoundButtonInactiveTemplate}"/>
				<Setter Property="Background" Value="{DynamicResource ProducerPlainBrush}"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<!-- Assumption: is contained in a DataTemplate with DataType=PlayerAction. -->
	<Style x:Key="ParallelPlayEffectButtonStyle" TargetType="{x:Type res:ParallelPlayButton}" BasedOn="{StaticResource ParallelPlayFileButtonStyle}">
		<Setter Property="Background" Value="{DynamicResource EffectButtonBackgroundBrush}"/>

		<Style.Triggers>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource EffectButtonPressedBackgroundBrush}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Template" Value="{DynamicResource RoundButtonInactiveTemplate}"/>
				<Setter Property="Background" Value="{DynamicResource EffectPlainBrush}"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<ControlTemplate x:Key="RectButtonTemplate" TargetType="{x:Type ButtonBase}">
		<Grid>
			<Border BorderThickness="{TemplateBinding BorderThickness}"
					BorderBrush="{TemplateBinding BorderBrush}"
					Background="{TemplateBinding Background}"
					SnapsToDevicePixels="True">

				<ContentPresenter x:Name="contentPresenter"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
			</Border>
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Opacity" TargetName="contentPresenter" Value="{StaticResource MouseOverOpacity}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" TargetName="contentPresenter" Value="{StaticResource DisabledTextOpacity}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	
	<!-- Secondary button with text.
	     The height must be restricted to limit the size of the button.
	-->
	<Style x:Key="RectButtonStyle" TargetType="{x:Type ButtonBase}">
		<Setter Property="Background" Value="{DynamicResource RectButtonBackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource ButtonFrameBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Foreground" Value="{DynamicResource RectButtonTextBrush}"/>
		<Setter Property="Template" Value="{DynamicResource RectButtonTemplate}"/>
		<Setter Property="ContentTemplate" Value="{DynamicResource TextContentTemplate}"/>
		<Setter Property="Padding" Value="5,3"/>
		
		<Style.Triggers>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource RectButtonPressedBackgroundBrush}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	
	<!-- Secondary button with image -->
	<Style x:Key="SquareImageButtonStyle" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource RectButtonStyle}">
		<Setter Property="ContentTemplate" Value="{DynamicResource ImageButtonContentTemplate}"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
		<Setter Property="Margin" Value="1,0"/>
		<Setter Property="Height" Value="27"/>
	</Style>


	<ControlTemplate x:Key="ToggleSettingButtonTemplate" TargetType="{x:Type ToggleButton}">
		<Grid Margin="{TemplateBinding Margin}">
			<Border Background="{TemplateBinding Background}"
					BorderThickness="{TemplateBinding BorderThickness}"
					BorderBrush="{TemplateBinding BorderBrush}"/>

			<ContentPresenter x:Name="contentPresenter"
                              HorizontalAlignment="Stretch"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="Stretch"
                              Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
		</Grid>
	</ControlTemplate>


	<Style x:Key="ToggleImageSettingButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
		<Setter Property="Template" Value="{DynamicResource ToggleSettingButtonTemplate}"/>
		<Setter Property="ContentTemplate" Value="{DynamicResource ImageButtonContentTemplate}"/>
		<Setter Property="Margin" Value="1"/>
		<Setter Property="Padding" Value="5"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{DynamicResource ActionButtonPlainBrush}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{DynamicResource ActionButtonPlainBrush}"/>
		<Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
		<Setter Property="Height" Value="32"/>
		
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Background" Value="{DynamicResource FrameBrush}"/>
			</Trigger>

			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="{StaticResource DisabledElementOpacity}"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style x:Key="ToggleTextButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource RectButtonStyle}">
		<Setter Property="Height" Value="26"/>
		<Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>
		
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Background" Value="{DynamicResource RectButtonPressedBackgroundBrush}"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<Style x:Key="ToggleImageButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SquareImageButtonStyle}">
		<Style.Triggers>
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Background" Value="{DynamicResource RectButtonPressedBackgroundBrush}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>
